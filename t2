#define _CRT_SECURE_NO_WARNINGS
#include "stdafx.h"
#include <string>
#include <fstream>
#include <list>
#include <vector>
#include <iostream>
#include <ctime>
#include <iomanip>
#include <sstream>
#include "MarketData.cpp"

using namespace std;

class Exchange
{
private:
	int strToI(string s)
	{
		double r = 0.0;
		int i = 0;
		while (i<s.length() && s.at(i) >= '0' && s.at(i) <= '9') {
			r = (r*10.0) + (s.at(i) - '0');
			++i;
		}

		return r;
	};

	double strToD(string s)
	{
		double r = 0.0;
		int i = 0;
		while (i<s.length() && s.at(i) >= '0' && s.at(i) <= '9') {
			r = (r*10.0) + (s.at(i) - '0');
			++i;

			if (s.at(i) == '.') {
				double factor = 0.1;
				++i;
				while (i<s.length() && s.at(i) >= '0' && s.at(i) <= '9') {
					r += (s.at(i) - '0') * factor;
					++i;
					factor *= 0.1;
				}
			}
		}

		return r;
	};
public:	
	void updateMarketData(MarketData md)
	{
		if (md.Underlying)
		{
			underlyingBid = md.BidPrice;
			underlyingAsk = md.AskPrice;
			underlyingBidQ = md.BidQty;
			underlyingAskQ = md.AskQty;
		}
		else
		{
			warrantBid = md.BidPrice;
			warrantAsk = md.AskPrice;
			warrantBidQ = md.BidQty;
			warrantAskQ = md.AskQty;
		}
	};
	list<MarketData> marketDatas;
	string baseDirectory;
	string warrant;
	string underlying;
	double warrantBid;
	double warrantAsk;
	int warrantBidQ;
	int warrantAskQ;
	double underlyingBid;
	double underlyingAsk;
	int underlyingBidQ;
	int underlyingAskQ;
	Exchange(std::string u, std::string w, string baseDirectory)
	{	
		time_t t = time(0);
		auto now = *localtime(&t);
		stringstream ss;
		ss << put_time(&now, "%Y-%m-%d");
		string timeStr = ss.str();
		timeStr = "20170922";
		ifstream inFile;		
		list<MarketData> underlyings;
		list<MarketData> warrants;		
		string line;
		string fileName = baseDirectory + timeStr + "\\MarketData\\" + timeStr + u + ".log";
		inFile.open(fileName);
		if (!inFile)
		{
			printf("s% doesn't exist", fileName);
			exit;
		}
		else
		{
			while (getline(inFile, line))
			{	
				vector<string> v{ explode(line, ',') };
				if (!is_number(v[2])) continue;
				MarketData md;
				md.TimeStr = v[0];
				md.Bid = v[2];
				md.Ask = v[4];
				md.BidQ = v[3];
				md.AskQ = v[5];
				md.Underlying = true;
				md.BidPrice = strToD(md.Bid);
				md.AskPrice = strToD(md.Ask);
				md.BidQty = strToI(md.BidQ);
				md.AskQty = strToI(md.AskQ);
				underlyings.push_back(md);
			}
			inFile.close();
		}

		fileName = baseDirectory + timeStr + "\\MarketData\\" + timeStr + w+ ".log";
		inFile.open(fileName);
		if (!inFile)
		{
			printf("s% doesn't exist", fileName);
			exit;
		}
		else
		{
			while (getline(inFile, line))
			{
				vector<string> v{ explode(line, ',') };
				if (!is_number(v[2])) continue;
				MarketData md;
				md.TimeStr = v[0];
				md.Bid = v[2];
				md.Ask = v[4];
				md.BidQ = v[3];
				md.AskQ = v[5];
				md.Underlying = false; 
				md.BidPrice = strToD(md.Bid);
				md.AskPrice = strToD(md.Ask);
				md.BidQty = strToI(md.BidQ);
				md.AskQty = strToI(md.AskQ);
				warrants.push_back(md);
			}
			inFile.close();
		}

		
		list<MarketData>::const_iterator i, j;
		i = underlyings.begin();
		j = warrants.begin();
		while (i != underlyings.end() && j != warrants.end())
		{
			if (compareStr((*i).TimeStr, (*j).TimeStr) == -1 || compareStr((*i).TimeStr, (*j).TimeStr) == 0) {
				marketDatas.push_back(*i);	
				i++;
			}
			else
			{
				marketDatas.push_back(*j);
				j++;
			}
		}
		while (i != underlyings.end())
		{
			marketDatas.push_back(*i);
			i++;
		}

		while (j != warrants.end())
		{
			marketDatas.push_back(*j);
			j++;
		}

		ofstream myfile("example.txt");
		if (myfile.is_open())
		{std::list<MarketData>::const_iterator iterator;
			for (iterator = marketDatas.begin(); iterator != marketDatas.end(); ++iterator)
				myfile << (*iterator).TimeStr << "\n";
			myfile.close();
		}
		
	}

	int compareStr(string s1, string s2)
	{
		if (s1.size() == s2.size())
		{
			unsigned int i = 0;
			while (i < s1.size())
			{
				if (s1.at(i) > s2.at(i)) return 1; else if (s1.at(i) < s2.at(i)) return -1;
				i++;
			}
			return 0;
		}
		return -2;
	}
	vector<string> explode(const string& s, const char& c)
	{
		string buff{ "" };
		vector<string> v;

		for (auto n : s)
		{
			if (n != c) buff += n; else
				if (n == c) { v.push_back(buff); buff = ""; }
		}
		v.push_back(buff);
		return v;
	}
	bool is_number(const std::string& str)
	{
		if (str == "" || str == "0") return false;
		for (unsigned int i = 0; i<str.length(); i++) {
			if (!isdigit(str[i]) && str[i] != '.') return false;			
		}
		return true;
	}
	int sendOrder(bool buy, double price, int quantity)
	{
		if (buy)
		{
			if (price >= warrantAsk)
			{
				if (quantity <= warrantAskQ)
				{
					printf("%s: bought %d at $%f", warrant, quantity, warrantAsk);
					return quantity;
				}
				else
				{
					printf("%s: failed to buy all %d, bought market Qty: %d at $%f", warrant, quantity, warrantAskQ, warrantAsk);
					return warrantAskQ;
				}
			}
			else
			{
				printf("%s Unfair Pricing: Warrant Ask should be %f, but it is %f", warrant, price, warrantAsk);
				return 0;
			}
		}
		else
		{
			if (price <= warrantBid)
			{
				if (quantity <= warrantAskQ)
				{
					printf("%s: sold %d at $%f", warrant, quantity, warrantBid);
					return quantity;
				}
				else
				{
					printf("%s: failed to sell all %d, bought market Qty: %d at $%f", warrant, quantity, warrantBidQ, warrantBid);
					return warrantBidQ;
				}
			}
			else
			{
				printf("%s Unfair Pricing: Warrant Ask should be %f, but it is %f", warrant, price, warrantBid);
				return 0;
			}
		}
	}
};
